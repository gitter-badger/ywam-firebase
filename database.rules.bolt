path / {read(){ false}
        write(){false}
        }

path /location_private { read(){ isSiteAdmin() }
                         write(){isSiteAdmin()}
                         }        

//All language phrases TODO change write level to isStaff()
path /phrases { read() { true }  write() { canEditPhrases() } }

path /app_log {write() {true}
               read() { isStaff() } }

//list of languages at this path
path /languages { read() { auth != null }   }

path /questions_for_applications { read(){auth != null}
                                   write(){canEditLocationInfo()}
                                 }

 

//Schools
path /schools/{id} { read() { isStaff() } }
path /schools/{id}/roles { write() { isSchoolAdmin(id) } }


//schools public data
path /schools/{id}/public { read() { true } write() {isSchoolAdmin(id) } }

path /system { read() { isStaff() }
                    }
path /system/tasks { read() { isStaff() }
                    index() {["status"] }}

path /prayers { read() { isStaff() }
                write() { isStaff() }  }

path /search { read() { isStaff() }
               write() { isStaff()} }

path /role_calls { read() { isStaff() }
                }

//Applications
path /applications { index() { ["for/school_id"] } }

path /applications/{id} is Application {  read() {    checkAppAccess(id)  }
                                           write() {    checkAppAccess(id)  }  
                                          }

path /applications/{id}/for  { read() { auth.uid == data.child('user_id').val()  || isStaff() }  
                                write() {auth.uid == newData.child('user_id').val() ||  checkAppAccess(id) }
                               }
                                
path /applications/{id}/requests  {  
                                  write() {auth.uid == data.parent().child('for').child('user_id').val()}
                                 }   
path /applications/{id}/answers_to_questions  {  
                                  write() {auth.uid == root.applications[id].for.user_id.val() }
                                  read() {auth.uid == root.applications[id].for.user_id.val()}
                                }                                   
path /applications/{id}/{ref_key}/user_set  {  
                                  write() {auth.uid == root.applications[id].for.user_id.val() && checkRef(ref_key) }
                                  read() {auth.uid == root.applications[id].for.user_id.val() && checkRef(ref_key)}
                                }  
path /applications/{id}/{ref_key}/status  {  
                                  read() {auth.uid == root.applications[id].for.user_id.val() && checkRef(ref_key)}
                                }                                 
path /applications/{id}/{ref_key}/meta {  
                                  read()  { root.applications[id][ref_key].hash == auth.uid && checkRef(ref_key)} 
                                    }   
path /applications/{id}/{ref_key}/form {  
                                  read()  { root.applications[id][ref_key].hash == auth.uid && checkRef(ref_key)} 
                                  write()  { root.applications[id][ref_key].hash == auth.uid && checkRef(ref_key)} 
                                    }                                     

checkRef(ref_key){
    ref_key == 'reference1' || ref_key=='reference2'
}


path /applications/{id}/meta  { read() {  isStaff() ||  auth.uid == data.parent().child('for').child('user_id').val() }  
                                write() {  checkAppAccess(id) }
                                }                                
path /applications/{id}/private {read() { auth.uid == data.parent().child('for').child('user_id').val() }  
                                 write() {auth.uid == data.parent().child('for').child('user_id').val()} }

path /applications/{id}/admin_notes 
{
    read()  {  isSchoolAdmin(data.parent().child('for').child('school_id').val())  }  
    write() {  isSchoolAdmin(data.parent().child('for').child('school_id').val()) } 
}

path /applications/{id}/log { read() {  isSchoolAdmin(data.parent().child('for').child('school_id').val())  }  
                              write() {  isSchoolAdmin(data.parent().child('for').child('school_id').val()) } }



type Application {}

// Reference tokens can be read directly 
path /reference_tokens/{hash} {read(){ true}}
path /reference_tokens/{hash}/token_requested {write(){ true}}


// Profiles Node
path /profiles {read() {isStaff() }}
path /profiles/{id}/contact {read() {isStaff() }}
path /profiles/{id}/postal {read() {isStaff() }}
path /profiles/{id}/emergency_contact {read() {isStaff() }}
path /profiles/{id}/passport {read() {isStaff() }}



path /profiles/{id} is Profile { read() { auth.uid == id }  
                                 write() {auth.uid == id }}                                 

type Profile {
    contact: Object
    health: Object | Null
    passport: Object | Null
    postal: Object | Null
    oldID: String | Null
    modified: Number | Null
    emergency_contact: Object | Null
    basic: Object | Null
    avatars: Object | Null

}
path /profiles/{id}/contact is ProfileContact { read() {isStaff() }}

type ProfileContact {
    avatar_1080: String | Null
    avatar_200: String | Null
    avatar_640: String | Null
    current_avatar_id : String | Null
    current_location_id: String | Null
    dob: String | Null
    dts: Object | Null
    education: String | Null
    email: String | Null
    first_name : String | Null
    gender: String | Null
    home_phone: String | Null
    last_name : String | Null
    marital_status: String | Null
    mobile_phone: String | Null
    occupations: String | Null
    skype: String | Null
    ywam_experience: String | Null}


path /location_public { read() { true}
                        write() {canEditLocationInfo()} }



path /location  { read() { isStaff() }}
path /location/default_school_questions {write(){canEditLocationInfo()}}




path /paypal_payments { read() { canEditAccounting() }
                        write() { canEditAccounting() }
                                          }
path /paypal_events { read() { canEditAccounting() }
                        write() { canEditAccounting() }
                                          }

path /stripe_transactions { read() { canEditAccounting() }
                        write() { canEditAccounting() }
                                          }
path /stripe_events { read() { canEditAccounting() }
                        write() { canEditAccounting() }
                                          }

path /funds { read() { canEditAccounting() }
                          write() { canEditAccounting() } }

path /funds/{id}/meta { read() { root.funds[id].meta.public }
                                                     
                                          }  

 path /designation_subscriptions { read() { canEditAccounting() }
                          write() { canEditAccounting() }
                                          }                                            

 
                                                                                 

path /role_calls/{id} { read() { isStaff() }
                         write() { isStaff() } }

path /site_roles { read() { auth != null}
                   write() { root.site_roles.site_admin[auth.uid] != null } }

// Access Controll Function 


//is this uid of the current logged in user?
isCurrentUser(uid) { auth != null && auth.uid == uid } 

//
belongsToUser() { auth != null && auth.uid == data.child('user_id').val()  }

// is this user a in the current_staff_index at the location they claim to be at?
isStaff() {  
  root.location.current_staff_index[ auth.uid ] != null 
  }

//Can this user access Staff Applications at this location? 
isStaffAppAdmin() {  
    prior(root.site_roles.access_staff_apps[ auth.uid ] ) != null 
        }

// Is this user a school admin of this school?
isSchoolAdmin(school_id) { root.schools[school_id].roles[auth.uid].admin != null }

// Is this user a school staff of this school?
isSchoolStaff(school_id) { root.schools[school_id].roles[auth.uid].staff != null }


checkAppAccess(appID){ 
//checking if the app is for staff at a location and if this user is isStaffAppAdmin()
// to make sure it is a string adding this:  + '' 

isStaffAppAdmin(  )
 //or we check if they are a school admin
||
isSchoolAdmin(  root.applications[appID].for.school_id + '' ) 
}

isSiteAdmin(){
    root.site_roles['site_admin'][auth.uid] != null}
canEditAccounting(){
    root.site_roles['can_edit_accounting'][auth.uid] != null}
canEditLocationInfo(){
    root.site_roles['can_edit_location_info'][auth.uid] != null}
canEditLocationVisaReq(){
    root.site_roles['can_edit_location_visa_requirements'][auth.uid] != null}


//Can Edit Translation phrases
canEditPhrases(){root.site_roles['access_translation'][auth.uid] != null}
// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }