path / {read(){ false}
        write(){false}
        }

path /locations_private {read(){ false}
                         write(){false}
                         }        

//All language phrases TODO change write level to isStaff()
path /phrases { read() { true }  write() { canEditPhrases() } }

//list of languages at this path
path /languages { read() { auth != null }   }
 

//Schools
path /schools/{id} { read() { isStaff() } }
path /schools/{id}/roles { write() { isSchoolAdmin(id) } }


//schools public data
path /schools/{id}/public { read() { true } write() {isSchoolAdmin(id) } }

path /system { read() { isStaff() }
                    }
path /system/tasks { read() { isStaff() }
                    index() = ["status"]}

path /prayers { read() { isStaff() },
                write() { isStaff() }  }

path /search { read() { isStaff() },
               write() { isStaff()} }

path /role_calls { read() { isStaff() }
                }

//Applications
path /applications { index() = ["for/school_id"]  }

path /applications/{id} is Application {  read() {    checkAppAccess(id)  }
                                           write() {    checkAppAccess(id)  }  
                                          }

path /applications/{id}/for  { read() { auth.uid == data.child('user_id').val()  || isStaff() }  
                                write() {auth.uid == newData.child('user_id').val() ||  checkAppAccess(id) }
                               }
                                
path /applications/{id}/requests  {  
                                  write() {auth.uid == data.parent().child('for').child('user_id').val()}
                                }   
path /applications/{id}/reference1/user  {  
                                  write() {auth.uid == root.applications[id].for.user_id}
                                  read() {auth.uid == root.applications[id].for.user_id}
                                }  
// path /applications/{id}/reference1/name  {  
//                                   write() {auth.uid == root.applications[id].for.user_id}
//                                 }                                      
// path /applications/{id}/reference1/relation  {  
//                                   write() {auth.uid == root.applications[id].for.user_id}
//                                 }  

path /applications/{id}/meta  { read() {  isStaff() }  
                                write() {  checkAppAccess(id) }
                                }                                
path /applications/{id}/private {read() { auth.uid == data.parent().child('for').child('user_id').val() }  
                                 write() {auth.uid == data.parent().child('for').child('user_id').val()} }

path /applications/{id}/admin_notes 
{
    read()  {  isSchoolAdmin(data.parent().child('for').child('school_id').val())  }  
    write() {  isSchoolAdmin(data.parent().child('for').child('school_id').val()) } 
}

path /applications/{id}/log { read() {  isSchoolAdmin(data.parent().child('for').child('school_id').val())  }  
                              write() {  isSchoolAdmin(data.parent().child('for').child('school_id').val()) } }



type Application {}





// Profiles Node
path /profiles {read() {isStaff() }}
path /profiles/{id} is Profile { read() { auth.uid == id }  
                                 write() {auth.uid == id }}                                 

type Profile {
    com: Object
    health: Object | Null
    passport: Object | Null
    postal: Object | Null
    oldID: String | Null
    modified: Number | Null
    emergency_contact: Object | Null
    basic: Object | Null
    avatars: Object | Null

}
path /profiles/{id}/com is ProfileCom { read() {isStaff() }}

type ProfileCom {
    avatar_1080: String | Null
    avatar_200: String | Null
    avatar_640: String | Null
    current_avatar_id : String | Null
    current_location_id: String | Null
    dob: String | Null
    dts: Object | Null
    education: String | Null
    email: String | Null
    first_name : String | Null
    gender: String | Null
    home_phone: String | Null
    last_name : String | Null
    marital_status: String | Null
    mobile_phone: String | Null
    occupations: String | Null
    skype: String | Null
    ywam_experience: String | Null


  //  modified: CurrentTimestamp
}
path /profiles_search {read() {isStaff()}
                       index() = ["string"] }


path /locations_public { read() { true} }
path /locations_public/{id}/notices { write() {canEditLocationNotices(id) } }
path /locations_public/{id}/nations { write() {canEditLocationVisaReq(id) } }
path /locations/{id} is Location { read() { isStaff() }
                                   write() { isStaff() }}


type Location {

    projects: Object | Null,
 //   validate() { this.modified == now }
    
}


path /paypal_transactions/{location_id} { read() { canAccessPaypalTransactions(location_id) }
                                          write() { canAccessPaypalTransactions(location_id) }
                                          }

path /role_calls/{id} { read() { isStaff() },
                         write() { isStaff() } }


// Access Controll Function 


//is this uid of the current logged in user?
isCurrentUser(uid) { auth != null && auth.uid == uid } 

//
belongsToUser() { auth != null && auth.uid == data.child('user_id').val()  }

// is this user a in the current_staff_index at the location they claim to be at?
isStaff() {  
  root.profiles[auth.uid].com.current_location_id != null &&

  root.locations[ root.profiles[auth.uid].com.current_location_id + ''  ]
      .current_staff_index[ auth.uid ] != null 
  }

//Can this user access Staff Applications at this location? 
isStaffAppAdmin(location_id) {  
    prior(root.locations[location_id].perms.access_staff_apps[ auth.uid ] ) != null 
        }

// Is this user a school admin of this school?
isSchoolAdmin(school_id) { root.schools[school_id].roles[auth.uid].admin != null }

// Is this user a school staff of this school?
isSchoolStaff(school_id) { root.schools[school_id].roles[auth.uid].staff != null }


checkAppAccess(appID){ 
//checking if the app is for staff at a location and if this user is isStaffAppAdmin()
// to make sure it is a string adding this:  + '' 
root.applications[appID].for.staff_location_id != null &&
isStaffAppAdmin( root.applications[appID].for.staff_location_id + '' )
 //or we check if they are a school admin
||
isSchoolAdmin(  root.applications[appID].for.school_id + '' ) 
}

canAccessPaypalTransactions(location_id){
    root.locations[location_id].perms['access_paypal_transactions'][auth.uid] != null}
canEditLocationNotices(location_id){
    root.locations[location_id].perms['can_edit_location_notices'][auth.uid] != null}
canEditLocationVisaReq(location_id){
    root.locations[location_id].perms['can_edit_location_visa_requirements'][auth.uid] != null}


//Can Edit Translation phrases
canEditPhrases(){
   root.profiles[auth.uid].com.current_location_id != null && // check for location
   root.locations[ root.profiles[auth.uid].com.current_location_id + ''  ] // use location
        .perms['access_translation'][auth.uid] != null
  }





type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }

